*Dannys Diner SQL Case Study*

Schema and Queries created with PostgreSQL v13

    CREATE SCHEMA dannys_diner;
    SET search_path = dannys_diner;
    
    CREATE TABLE sales (
      "customer_id" VARCHAR(1),
      "order_date" DATE,
      "product_id" INTEGER
    );
    
    INSERT INTO sales
      ("customer_id", "order_date", "product_id")
    VALUES
      ('A', '2021-01-01', '1'),
      ('A', '2021-01-01', '2'),
      ('A', '2021-01-07', '2'),
      ('A', '2021-01-10', '3'),
      ('A', '2021-01-11', '3'),
      ('A', '2021-01-11', '3'),
      ('B', '2021-01-01', '2'),
      ('B', '2021-01-02', '2'),
      ('B', '2021-01-04', '1'),
      ('B', '2021-01-11', '1'),
      ('B', '2021-01-16', '3'),
      ('B', '2021-02-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-07', '3');
     
    
    CREATE TABLE menu (
      "product_id" INTEGER,
      "product_name" VARCHAR(5),
      "price" INTEGER
    );
    
    INSERT INTO menu
      ("product_id", "product_name", "price")
    VALUES
      ('1', 'sushi', '10'),
      ('2', 'curry', '15'),
      ('3', 'ramen', '12');
      
    
    CREATE TABLE members (
      "customer_id" VARCHAR(1),
      "join_date" DATE
    );
    
    INSERT INTO members
      ("customer_id", "join_date")
    VALUES
      ('A', '2021-01-07'),
      ('B', '2021-01-09');
      
    

**Query #1**
What is the total amount each customer spent at Dannys Diner?


    SELECT
      	sales.customer_id, sum(menu.price) total_amount
    FROM dannys_diner.sales
    JOIN dannys_diner.menu
    ON sales.product_id = menu.product_id
    GROUP BY 1
    ORDER BY 1;

| customer_id | total_amount |
| ----------- | ------------ |
| A           | 76           |
| B           | 74           |
| C           | 36           |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/2rM8RAnq7h5LLDTzZiRWcd/138)


**Query #2**
How many days has each customer visited Dannys Diner?


 SELECT
     customer_id Customer, count(distinct order_date) Visits
    FROM dannys_diner.sales
    Group BY 1
    Order BY 1;
    
| customer | visits |
| -------- | ------ |
| A        | 4      |
| B        | 6      |
| C        | 2      |


**Query #3**
 What was the first item from the menu purchased by each customer?
 
 
SELECT distinct(customer_id) customer1, order_date, product_name item
FROM dannys_diner.sales s
JOIN dannys_diner.menu m
ON s.product_id = m.product_id
ORDER BY order_date, customer1
LIMIT 4;


| customer1 | order_date               | item  |
| --------- | ------------------------ | ----- |
| A         | 2021-01-01T00:00:00.000Z | curry |
| A         | 2021-01-01T00:00:00.000Z | sushi |
| B         | 2021-01-01T00:00:00.000Z | curry |
| C         | 2021-01-01T00:00:00.000Z | ramen |



**Query #4**
What is the most purchased item on the menu and how many times was it purchased by all customers?


SELECT  m.product_name item, count(s.product_id) Num
FROM dannys_diner.menu m
JOIN dannys_diner.sales s
ON m.product_id = s.product_id
GROUP BY 1
LIMIT 1

| item  | num |
| ----- | --- |
| ramen | 8   |


**Query #5**
 Which item was the most popular for each customer?
 
 
 SELECT s.customer_id, count(*), m.product_name item
FROM dannys_diner.menu m
JOIN dannys_diner.sales s
ON m.product_id = s.product_id
GROUP BY 1, 3
ORDER BY 2 desc 
LIMIT 5


| customer_id | count | item  |
| ----------- | ----- | ----- |
| C           | 3     | ramen |
| A           | 3     | ramen |
| B           | 2     | curry |
| B           | 2     | sushi |
| B           | 2     | ramen |


**Query #6**

Which item was purchased first by the customer after they became a member?

WITH first_item_cte AS 
(
SELECT
	t1.customer_id,
    t2.product_name,
    t1.order_date,
    t3.join_date,
    dense_rank () OVER (PARTITION BY t1.customer_id ORDER BY t1.order_date asc) as ranked
FROM 
	dannys_diner.sales t1
    JOIN dannys_diner.menu t2 on (t1.product_id = t2.product_id)
    JOIN dannys_diner.members t3 on (t1.customer_id = t3.customer_id)
WHERE t1.order_date >= t3.join_date
)
SELECT * 
FROM first_item_cte
WHERE ranked = 1
;


| customer_id | product_name | order_date               | join_date                | ranked |
| ----------- | ------------ | ------------------------ | ------------------------ | ------ |
| A           | curry        | 2021-01-07T00:00:00.000Z | 2021-01-07T00:00:00.000Z | 1      |
| B           | sushi        | 2021-01-11T00:00:00.000Z | 2021-01-09T00:00:00.000Z | 1      |


**Query #7**

Which item was purchased just before the customer became a member?

WITH prior_item_cte AS 
(
SELECT
    t1.customer_id,
    t2.product_name,
    t1.order_date,
    t3.join_date,
   dense_rank () OVER (PARTITION BY t1.customer_id ORDER BY t1.order_date desc) as ranked
FROM 
    dannys_diner.sales t1
     JOIN dannys_diner.menu t2 on (t1.product_id = t2.product_id)
     JOIN dannys_diner.members t3 on (t1.customer_id = t3.customer_id)
WHERE t1.order_date < t3.join_date
 )
SELECT * 
FROM prior_item_cte
WHERE ranked = 1
;


| customer_id | product_name | order_date               | join_date                | ranked |
| ----------- | ------------ | ------------------------ | ------------------------ | ------ |
| A           | sushi        | 2021-01-01T00:00:00.000Z | 2021-01-07T00:00:00.000Z | 1      |
| A           | curry        | 2021-01-01T00:00:00.000Z | 2021-01-07T00:00:00.000Z | 1      |
| B           | sushi        | 2021-01-04T00:00:00.000Z | 2021-01-09T00:00:00.000Z | 1      |


**Query #8**
 
What is the total items and amount spent for each member before they became a member?

SELECT 
	t1.customer_id,
    count(t1.product_id) as total_items,
    sum(t2.price) as amount_spent
FROM 
	dannys_diner.sales t1
    JOIN dannys_diner.menu t2 on (t1.product_id = t2.product_id)
    JOIN dannys_diner.members t3 on (t1.customer_id = t3.customer_id)
WHERE
	t1.order_date < t3.join_date
GROUP BY 
	t1.customer_id
;


| customer_id | total_items | amount_spent |
| ----------- | ----------- | ------------ |
| B           | 3           | 40           |
| A           | 2           | 25           |


	
	



